# -*- coding: utf-8 -*-
"""benchmarkRS

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/8Raouf24/PFE/blob/master/benchmarkRS.ipynb
"""

!pip install surprise

import os
import json
import gzip
import pandas as pd
from urllib.request import urlopen
from surprise import BaselineOnly
from surprise import Dataset
from surprise import Reader
from surprise import NormalPredictor,SVD

from surprise.model_selection import cross_validate

"""D'abord , nous récupérons notre dataset grace a la commande wget"""

!wget http://deepyeti.ucsd.edu/jianmo/amazon/categoryFilesSmall/Musical_Instruments_5.json.gz

"""Nous pouvons manipuler les données sous forme de générateur , que nous utiliserons pour remplir un dictionnaire ( les données sont sous format .json)"""

### load the meta data

data = []
with gzip.open('Musical_Instruments_5.json.gz') as f:
    for l in f:
        data.append(json.loads(l.strip()))
    
# total length of list, this number equals total number of products
print(len(data))

# first row of the list
print(data[0])

"""Notre pré-traitement consiste a récolter seulement les colonnes de notre DataFrame qui nous serviront a la recommandation , c-à-d les items , les users , et les ratings"""

# we create a new data frame containing the required informations for our benchmark

df = pd.DataFrame.from_dict(data)
min_rating = 1.0
max_rating = 5.0
data_dict = {'userID':df['reviewerID'],'itemID':df['asin'],'rating':df['overall'].apply(lambda x: (x - min_rating) / (max_rating - min_rating))}
df_rs = pd.DataFrame.from_dict(data_dict)



print(df_rs.info)

reader = Reader(rating_scale=(0, 1))
data = Dataset.load_from_df(df_rs, reader)

"""Nous effectuons notre cross-validation"""

dic_results = cross_validate(SVD(), data, cv=5)
print(dic_results)

dic_results['test_rmse'].mean()

